{
  "name": "Logicode",
  "tagline": "An esoteric language based on logic gates.",
  "body": "# Logicode\r\nWelcome to Logicode!\r\n\r\nLogicode is a minimalistic language that is mainly based on Logisim.\r\n\r\nBecause of that, the only built-in commands are AND, OR and NOT, and you make the rest.\r\n\r\nThe three logic gates are represented like so:\r\n\r\n- `a&b`: AND of `a` and `b`.\r\n- `a|b`: OR of `a` and `b`.\r\n- `!a`: NOT of `a`.\r\n\r\nThere are more built-ins:\r\n\r\n- `?`: Random bit, either `0` or `1`.\r\n- `#`: Begins a line for comments.\r\n\r\nYou can make extra things from these commands, like circuits and variables.\r\n\r\n##Make-your-own Things\r\n\r\n###Circuits\r\nTo create a circuit, you have to do this:\r\n\r\n`circ circuit_name(arg1, arg2...)->{what the function does}`\r\n\r\n`circ` is the circuit \"declaration\", and everything after the `->` is interpreted as code. \r\n\r\nNormal circuits have 1 bit as output, but if more bits are required, use the `+` symbol to separate bits.\r\n\r\nLike this:\r\n\r\n`circ circuit_name(arg1, arg2...)->{1st bit}+{2nd bit}+...`\r\n\r\n###Variables\r\nTo create a variable:\r\n\r\n`var var_name=value`\r\n\r\n`var` is the variable declaration.\r\n\r\n###Conditions\r\nTo create a condition:\r\n\r\n`cond arg->{executed if arg = 1}/{executed if arg = 0}`\r\n\r\n`cond` is the variable declaration, `arg` is either a value of `0` or `1`, and the `/` is the separator of the two executing strings.\r\n\r\n##I/O\r\n\r\n###Output\r\nThere is also output as well:\r\n\r\n`out out_value`\r\n\r\n`out` is the output declaration, and you can include the built-in commands, as well as self-made circuits, into the output to be processed.\r\n\r\n##Example code:\r\n\r\n    circ xor(a,b)->(!(a&b))&(a|b)\r\n    var test=xor(1,1)\r\n    out !(test)\r\n\r\n    Output: 1\r\n\r\nThe circuit `xor` calculates the XOR of two bits, and `test` is declared as the XOR of 1 and 1 (which is 0). \r\n\r\nThen, the `out` outputs the NOT of `test`, which is `1`.\r\n\r\nExpanding on the previous example:\r\n\r\n    circ xor(a,b)->(!(a&b))&(a|b)\r\n    circ ha(a,b)->(a&b)+(xor(a,b))\r\n    out ha(1,?)\r\n\r\n    Output: 10\r\n    \r\nThe circuit `xor` is the same as before, and the circuit `ha` is a half-adder of two bits (so it takes two arguments), and outputs two bits.\r\n\r\nThe `out` outputs the half-adding of `1` and `?`, which is either `01` or `10` (depending on what the `?` gives).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}